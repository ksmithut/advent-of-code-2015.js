#!/usr/bin/env node
'use strict'

const path = require('path')
const fs = require('fs')
const program = require('commander')
const Promise = require('bluebird')
const chalk = require('chalk')

Promise.promisifyAll(fs)

const relative = path.join.bind(path, __dirname)
const RIGHT = chalk.green('✓')
const WRONG = chalk.red('✗')
const NOT_CHECKED = chalk.cyan('-')

program
  .usage('[options] <days...>')
  .option('-e, --examples', 'run the examples')
  .parse(process.argv)

program.args = program.args
  .map((file) => file.replace(/[^\d]/g, ''))
  .filter(Boolean)

Promise.resolve(program.args)
  .mapSeries(runDay)


function runDay(rawDay) {
  return Promise
    .resolve(`day${padLeft(rawDay, 2, '0')}`)
    .then((day) => Promise.props({
      name: chalk.white(day),
      input: fs.readFileAsync(relative(day, 'input.txt'), 'utf8'),
      module: require(`./${day}`),
      answers: require(`./${day}/answers`)
    }))
    .then((day) => {
      day.input = day.input.trim()
      console.log()
      console.log(chalk.gray(`===========\n== ${day.name} ==\n===========`))
      console.log()
      console.log(chalk.underline.yellow('Part 1:'))
      runPart(day.module.part1, day.input, day.answers.part1)
      console.log(chalk.underline.yellow('Part 2:'))
      runPart(day.module.part2, day.input, day.answers.part2)
    })
}

function padLeft(string, length, char) {
  const diff = length - string.length
  if (diff <= 0) return string
  return new Array(diff).fill(char).join('') + string
}

function runPart(part, mainInput, answers) {
  const method = part
  const answer = answers.answer
  const examples = answers.examples || []
  if (typeof method !== 'function') return console.log('Not Implemented')

  if (program.examples) {
    examples.forEach((example) => {
      let input = example.input
      const value = example.value
      input = Array.isArray(input) ? input : [ input ]

      const output = method.apply(null, input)

      if (output === value) {
        console.log(` ${RIGHT} ${input} = ${value}`)
      } else {
        console.log(` ${WRONG} expected ${value}, given ${output}`)
      }
    })
  }

  const output = method(mainInput)
  let consoleOutput = `\nanswer: ${output} `

  if (typeof answer === 'undefined') {
    consoleOutput += NOT_CHECKED
  } else {
    consoleOutput += output === answer ? RIGHT : WRONG
  }

  console.log(consoleOutput)
  console.log()
}
